<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>String Index on Pythonistan</title>
    <link>https://fiyakasiz.github.io/categories/string-index/</link>
    <description>Recent content in String Index on Pythonistan</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>tr-TR</language>
    <lastBuildDate>Thu, 11 Aug 2016 00:17:50 -0400</lastBuildDate>
    <atom:link href="https://fiyakasiz.github.io/categories/string-index/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Bir Kere Daha Karakter Dizileri</title>
      <link>https://fiyakasiz.github.io/blog/bir-kere-daha-karakter-dizileri/</link>
      <pubDate>Thu, 11 Aug 2016 00:17:50 -0400</pubDate>
      
      <guid>https://fiyakasiz.github.io/blog/bir-kere-daha-karakter-dizileri/</guid>
      <description>

&lt;p&gt;&lt;em&gt;Değişkenler&lt;/em&gt; konusuna çoktan girmemiz gerekirdi lakin &lt;a href=&#34;https://fiyakasiz.github.io/blog/pythonda-stringleri-ogreniyoruz-1&#34;&gt;karakter dizileri&lt;/a&gt; gerçekten önemli bir konu olduğu için son bir kez daha bu konuyu işlemeye karar verdim.&lt;/p&gt;

&lt;p&gt;Ettekraru Ahsen Velev Kane Yüzseksen demişler.&lt;/p&gt;

&lt;h2 id=&#34;karakter-dizileri&#34;&gt;Karakter Dizileri&lt;/h2&gt;

&lt;h3 id=&#34;karakter-dizilerinden-alt-dizi-seçmek&#34;&gt;Karakter Dizilerinden Alt Dizi Seçmek&lt;/h3&gt;

&lt;p&gt;Daha önce &lt;a href=&#34;https://fiyakasiz.github.io/blog/pythonda-stringleri-ogreniyoruz-1/#karakter-dizisi-sras-string-index&#34;&gt;&lt;em&gt;Stringler 1. Bölüm&lt;/em&gt;&lt;/a&gt; yazımda değindiğim karakter dizilerinden alt dizi seçmek (&lt;strong&gt;substring extracting&lt;/strong&gt;) mevzuuna bugün daha yakından bakalım.&lt;/p&gt;

&lt;h3 id=&#34;karakter-dizi-sırası-string-index&#34;&gt;Karakter Dizi Sırası (String Index)&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://fiyakasiz.github.io/blog/pythonda-stringleri-ogreniyoruz-1/&#34;&gt;&lt;em&gt;Stringler 1. Bölüm&lt;/em&gt;&lt;/a&gt; ve &lt;a href=&#34;https://fiyakasiz.github.io/blog/pythonda-stringleri-ogreniyoruz-2/&#34;&gt;&lt;em&gt;Stringler 2. Bölüm&lt;/em&gt;&lt;/a&gt; yazılarımı okuduysanız karakter dizileri sırası hakkında belli bir fikir elde etmişsinizdir.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Hatırlayalım&lt;/strong&gt;: &lt;code&gt;kelime&lt;/code&gt; değişkeni ile gösterilen bir karakter dizimiz olsun. &lt;code&gt;kelime[ i : j ]&lt;/code&gt; şeklinde bir ifade, &lt;code&gt;i&lt;/code&gt;&amp;lsquo;nin dahil, &lt;code&gt;j&lt;/code&gt;&amp;lsquo;nin hariç olduğu kelime dizisinden bir parçayı (&lt;a href=&#34;https://fiyakasiz.github.io/blog/pythonda-find-metodu/#fn:dib&#34;&gt;d.b.i.&lt;/a&gt; alt diziyi) gösterir.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;i = bis: baş indeks sırasını gösteren sayısal değer&lt;/p&gt;

&lt;p&gt;j = sis: son indeks sırasını gösteren sayısal değer&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;cite&gt;bis&lt;/cite&gt; ve/veya &lt;cite&gt;sis&lt;/cite&gt; değerleri verilmezse, varsayılan olarak &lt;em&gt;sonlu değerler (end values)&lt;/em&gt; kabul edilir. Yani &lt;code&gt;kelime[:]&lt;/code&gt; ifadesi &lt;code&gt;kelime&lt;/code&gt;&amp;lsquo;nin kendisine eşittir. Test edelim:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# -*- coding: utf-8 -*- 
kelime = &amp;quot;Panorama&amp;quot;
print kelime[:] == kelime # eşit mi  -&amp;gt; True, yani eşit
print &amp;quot;Panorama&amp;quot;[:] == &amp;quot;Panorama&amp;quot; # değişken kullanmadan yapabilirsiniz.
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;karakter-dizi-sırasının-ekstra-argümanı-adım&#34;&gt;Karakter Dizi Sırasının Ekstra Argümanı: Adım&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://fiyakasiz.github.io/blog/pythonda-palindrome-bulan-program/#gelelim-orjinal-kodlara&#34;&gt;Palindrom programımızı yazarken&lt;/a&gt; dizi sırasını gösteren söz diziminin(syntax) üçüncü bir argüman aldığını görmüştük.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;s[::-1] -&amp;gt; -1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;cite&gt;Adım değeri (ad)&lt;/cite&gt;; &lt;cite&gt;bis&lt;/cite&gt; ve &lt;cite&gt;sis&amp;rsquo;e&lt;/cite&gt; ek olarak dizi sırasının adımını ve yönünü interpreter&amp;rsquo;a söyleyebileceğimiz bir argümandır.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;kelime[ i : j : k]&lt;/code&gt; ifadesinde &lt;code&gt;k&lt;/code&gt; adım değerimizi ifade eder. Yani &lt;code&gt;kelime&lt;/code&gt;&amp;lsquo;nin &lt;code&gt;i&lt;/code&gt;&amp;lsquo;den(dahil), &lt;code&gt;j&lt;/code&gt;&amp;lsquo;ye kadar(hariç) olan kısmını &lt;code&gt;k&lt;/code&gt; adımla seçip alarak yeni bir alt karakter dizisi (substring) oluşturabiliriz.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;k = ad: index sırasının yönünü ve adım sayısını gösteren sayısal değer&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Başka bir deyişle &lt;code&gt;kelime&lt;/code&gt; dizisi; &lt;code&gt;i&lt;/code&gt; den başlayıp(dahil), &lt;code&gt;i+k&lt;/code&gt;, &lt;code&gt;i+2k&lt;/code&gt;, &lt;code&gt;i+3k&lt;/code&gt; v.s. &lt;code&gt;j&lt;/code&gt;&amp;lsquo;ye kadar (j dahil edilmeyecek) değerler alınarak yeni bir alt dizi oluşturacaktır.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;k&lt;/code&gt; &lt;cite&gt;adım değeri(ad)&lt;/cite&gt; verilmezse varsayılan değer &lt;code&gt;1&lt;/code&gt; olarak kabul edilir.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Örnek:&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;|P   |  a  |  n  |  o  |  r  |  a  |  m  |  a  |    -&amp;gt; karakter dizimiz
|0   |  1  |  2  |  3  |  4  |  5  |  6  |  7  | 8  |   -&amp;gt; pozitif index değerleri
|-8  | -7  | -6  | -5  | -4  | -3  | -2  | -1  |    |   -&amp;gt; negatif index değerleri
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Şimdi &lt;cite&gt;adım değeri(ad)&lt;/cite&gt; argümanını da kullanarak örnek karakter dizimizden bazı alt diziler(substring) elde edelim:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# -*- coding: utf-8 -*- 
kelime = &amp;quot;Panorama&amp;quot;

print kelime[0:8:1]   # varsayılan değerleri kullan     -&amp;gt; &amp;quot;Panorama&amp;quot; 
print kelime[::]      # üsttekiyle aynı                 -&amp;gt; &amp;quot;Panorama&amp;quot; 
print kelime[::-1]    # varsayılan değer ancak tersten  -&amp;gt; &amp;quot;amaronaP&amp;quot;
print kelime[:-2:-1]  # son karakteri al tersten        -&amp;gt; &amp;quot;a&amp;quot;
print kelime[:-3:-1]  # son iki karakteri al tersten    -&amp;gt; &amp;quot;am&amp;quot;
print kelime[:-4:-1]  # son üç karakteri al tersten     -&amp;gt; &amp;quot;ama&amp;quot;
print kelime[::-2]    # her iki karakteri al tersten    -&amp;gt; &amp;quot;aaoa&amp;quot;
print kelime[5:1:-2]  # 5 ile 1 arasında iki iki al tst -&amp;gt; &amp;quot;ao&amp;quot;
print kelime[5:0:-2]  # 5 ile 0 arasında iki iki al tst -&amp;gt; &amp;quot;aoa&amp;quot;
print kelime[2:38:1]  # 2 ile 38 arasında substring al  -&amp;gt; &amp;quot;norama&amp;quot;
print kelime[7:-1:-2] # 7 ile -1 arasında iki iki al t. -&amp;gt; &amp;quot;&amp;quot; boş karakter
print kelime[2:8:-2]  # 2 ile 8 arasında iki iki al t. -&amp;gt; &amp;quot;&amp;quot; boş karakter
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;cite&gt;bis&lt;/cite&gt; ve/veya &lt;cite&gt;sis&lt;/cite&gt; değerleri verilmemişse varsayılanın &lt;em&gt;sonlu değerler&lt;/em&gt; olduğunu yukarıda belirtmiştik(end values). Örneklerimizde bu durumu tekrar görüyoruz.&lt;/p&gt;

&lt;figure&gt;
    &lt;a href=&#34;https://fiyakasiz.github.io/img/blog/bir-kere-daha-karakter-dizileri/argumanli_alt_dizi_secmek.png&#34;&gt;&lt;img src=&#34;https://fiyakasiz.github.io/img/blog/bir-kere-daha-karakter-dizileri/argumanli_alt_dizi_secmek.png&#34; alt=&#34;Python&#39;da Karakter Dizilerinin Sırası ve Yönü&#34;&gt;&lt;/a&gt;
    &lt;figcaption&gt;Python&#39;da Karakter Dizilerinin Sırası ve Yönü (String Index and Step Argument) &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h2 id=&#34;boş-karakter&#34;&gt;Boş Karakter&lt;/h2&gt;

&lt;p&gt;Sondan bir önceki kod satırımıza dikkat edin lütfen. &lt;code&gt;kelime[7:-1:-2]&lt;/code&gt; ifadesinde &lt;code&gt;7.&lt;/code&gt; ve &lt;code&gt;-1.&lt;/code&gt; indexler eşittir ve dolayısıyla alınacak bir karakter yoktur (&lt;a href=&#34;{{ site.baseurl }}/blog/pythonda-find-metodu/#fn:dib&#34;&gt;d.b.i.&lt;/a&gt; &amp;lsquo;0&amp;rsquo; karakter vardır), elde edeceğimiz sadece boş karakterdir. &lt;code&gt;&#39;&#39;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Sonuncu satırdaki &lt;code&gt;kelime[2:8:-2]&lt;/code&gt; ifadesinde ise &lt;code&gt;8.&lt;/code&gt; sıra &lt;code&gt;2.&lt;/code&gt; sıranın sağında bulunduğundan ve sayma adımı &lt;code&gt;-2&lt;/code&gt; değeri ile negatif bir değer olduğundan (sayma yönü yanlış) sonuç yine boş karakterdir. &lt;code&gt;&#39;&#39;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Yine, karakter dizisi sırasını gösterdiğimiz üstteki tablomuzda pozitif index değeri olarak gösterilen &lt;code&gt;8.&lt;/code&gt; karakter indexinin aslında olmayan bir karaktere referans verdiğini görmüş olmalısınız.&lt;/p&gt;

&lt;p&gt;Gerçektende &lt;code&gt;print kelime[8]&lt;/code&gt; gibi bir kod bize hata döndürecektir. İsterseniz deneyin. &lt;em&gt;(string index out of range hatası)&lt;/em&gt; Çünkü kelimenin atıf yaptığı &lt;code&gt;&amp;quot;Panorama&amp;quot;&lt;/code&gt; karakter dizisinin bir 8. karakteri bulunmamaktadır.&lt;/p&gt;

&lt;p&gt;Ancak &lt;code&gt;8.&lt;/code&gt; yada &lt;code&gt;38.&lt;/code&gt; karakter değerini bir &lt;cite&gt;bis&lt;/cite&gt; ve/veya &lt;cite&gt;sis&lt;/cite&gt; değeri ile beraber kullandığımızda Payton&amp;rsquo;un bu kez hata vermediğini ve o noktaya kadar bulabildiği alt diziyi verdiğini görüyoruz. Yukarıda 1. örneğimizdeki &lt;code&gt;kelime[0:8:1]&lt;/code&gt;nin -&amp;gt; &amp;ldquo;Panorama&amp;rdquo; ve 10. örneğimizdeki &lt;code&gt;kelime[2:38:1]&lt;/code&gt; nin -&amp;gt; &amp;ldquo;norama&amp;rdquo; vermesi gibi.&lt;/p&gt;

&lt;p&gt;Boş karakterin değerlendirilmesindeki bu farklılık Payton&amp;rsquo;un orjinal tasarımından kaynaklanmaktadır ve bilinçli bir tercihi yansıtmaktadır.
{:.notice}&lt;/p&gt;

&lt;h2 id=&#34;yaygın-bir-hata-string-index-out-of-range&#34;&gt;Yaygın Bir Hata:  String Index Out Of Range&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://fiyakasiz.github.io/blog/pythonda-stringleri-ogreniyoruz-1/&#34;&gt;Karakter dizileri&lt;/a&gt; ile ilgili açıklamalarımı gereksiz bulmuş ve çok detaylı olduğunu düşünmüş olabilirsiniz.&lt;/p&gt;

&lt;p&gt;Özellikle döngüleri kullanırken string uzunluğunun yanlış hesaplanmasından dolayı pek çok &lt;strong&gt;String Index Out of Range&lt;/strong&gt; (Türkçe: &amp;ldquo;aralık dışında dizi endeksi&amp;rdquo;??) hatası ile karşılaşabilmekteyiz.&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://fiyakasiz.github.io/img/blog/bir-kere-daha-karakter-dizileri/string_index_out_of_range.png&#34; alt=&#34;Python&#39;da Sık Rastlanan String Out of Range Hatası&#34;&gt;
    &lt;figcaption&gt;Python&#39;da Sık Rastlanan String Index Out of Range Hatası &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Bu tür hataların önüne geçme adına &lt;em&gt;karakter dizisi sırası&lt;/em&gt; (string indexing) konusunu iyi bellemeli ve Python&amp;rsquo;da bol örnek çözmeliyiz.&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;Yazımı paylaşırsanız diğerlerinin de yazımdan faydalanmasını sağlamış olur ve beni çok memnun edersiniz, şimdiden çok teşekkürler! Sağlıcakla kalın&amp;hellip;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Python&#39;da &#39;.find&#39; hazır metodu</title>
      <link>https://fiyakasiz.github.io/blog/pythonda-find-metodu/</link>
      <pubDate>Wed, 10 Aug 2016 00:17:50 -0400</pubDate>
      
      <guid>https://fiyakasiz.github.io/blog/pythonda-find-metodu/</guid>
      <description>

&lt;p&gt;Blogda en son 9 Ağustos&amp;rsquo;ta &lt;a href=&#34;https://fiyakasiz.github.io/blog/pythonda-palindrome-bulan-program&#34;&gt;palindrom yazısı&lt;/a&gt; yayınlamıştım.&lt;/p&gt;

&lt;p&gt;Sonrasında evime geri taşınma işlemleri ve araya giren bayram tatili nedeni ile uzun bir ara verdim. Bu uzuuuuuun ara  nedeniyle hepinizden özür diliyorum.&lt;/p&gt;

&lt;h2 id=&#34;python-da-find-metodu-hazır-fonksiyon&#34;&gt;Python&amp;rsquo;da &lt;code&gt;find&lt;/code&gt; Metodu (Hazır Fonksiyon)&lt;/h2&gt;

&lt;p&gt;Payton&amp;rsquo;un içinde hazır gelen &lt;code&gt;find&lt;/code&gt; fonksiyonu ile aramak istediğimiz bir karakter dizisini başka bir karakter dizisi içinde aratabiliyoruz.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;.find&lt;/code&gt; çıktı olarak bize karakterin &lt;strong&gt;ilk&lt;/strong&gt; bulunduğu pozisyonu verir. Herhangi bir karakter dizisi bulunamazsa çıktı bu kez &lt;code&gt;-1&lt;/code&gt; olur.&lt;/p&gt;

&lt;h2 id=&#34;find-metodu-örneğimiz&#34;&gt;&lt;code&gt;find&lt;/code&gt; Metodu Örneğimiz&lt;/h2&gt;

&lt;p&gt;Aşağıdaki ifadeyi inceleyelim:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# -*- coding: utf-8 -*- 
ozluSoz =u&amp;quot;&amp;quot;&amp;quot;Büyük beyinler fikirleri, ortɑ beyinler olɑylɑrı,
küçük beyinler ise kişileri konuşur.&amp;quot;&amp;quot;&amp;quot;
bul = &amp;quot;beyinler&amp;quot;
bulunan_pozisyon = ozluSoz.find(bul)
print bulunan_pozisyon
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;find&lt;/code&gt; hazır fonksiyonunu kullanırken ilk olarak içinde arama yapacağımız karakter dizisini yazıyoruz. &lt;strong&gt;&amp;lsquo;ozluSoz&amp;rsquo;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Sonra yanına bir nokta &lt;code&gt;.&lt;/code&gt; koyup &lt;code&gt;find&lt;/code&gt; yazıyoruz. &lt;strong&gt;&amp;lsquo;ozluSoz.find&amp;rsquo;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;find&lt;/code&gt;&amp;lsquo;ın ardına bir parantez &lt;code&gt;()&lt;/code&gt; açıp içine aranacak karakter dizisini yazıyoruz. &lt;strong&gt;&amp;lsquo;ozluSoz.find(bul)&amp;rsquo;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Biz yukarıda kolaylık olsun diye karakter dizilerini temsil eden değişkenleri kullandık.(Değişkenler konusunu detaylı inceleyeceğiz. Şimdilik &lt;a href=&#34;https://fiyakasiz.github.io/blog/pythonda-stringleri-ogreniyoruz-1/#fn:degisken&#34;&gt;bkz&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;Yukarıdaki ifadeyi şu şekilde yazabilirdik:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# -*- coding: utf-8 -*- 
print u&amp;quot;&amp;quot;&amp;quot;Büyük beyinler fikirleri, ortɑ beyinler olɑylɑrı, 
küçük beyinler ise kişileri konuşur.&amp;quot;&amp;quot;&amp;quot;.find(&amp;quot;beyinler&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Bu ifade &lt;code&gt;bulunan_pozisyon&lt;/code&gt; değişkenimizin vereceği sonuç olan &amp;ldquo;6&amp;rdquo;. pozisyonu aynen verecektir.&lt;/p&gt;

&lt;p&gt;Yani &lt;code&gt;&amp;quot;beyinler&amp;quot;&lt;/code&gt; karakter dizisi &lt;code&gt;ozluSoz&lt;/code&gt; değişkeninin içerdiği karakter dizisinde &lt;strong&gt;ilk olarak&lt;/strong&gt; 6. pozisyonda bulunur.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Üç tırnak &lt;code&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/code&gt; kullanımına dikkat ettiniz mi? Üç tırnak ile birden fazla satırda devam eden karakter dizileri oluşturabilirsiniz. Karakter dizisi uzunsa birden fazla satıra bölmek kullanışlıdır.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://fiyakasiz.github.io/blog/pythonda-stringleri-ogreniyoruz-2/#trke-karakter-azizlii&#34;&gt;NEDEN &amp;lsquo;u&amp;rsquo; KARAKTERİ VAR:&lt;/a&gt;&lt;/strong&gt; Yukarıda u(unicode) şerhini koymazsanız maalesef Sublime Text bulunan pozisyonu Türkçe ü karakterlerinden dolayı 8 olarak veriyor. Ayrıntılı bilgi için linkteki açıklamama bakın lütfen.&lt;/p&gt;

&lt;h2 id=&#34;find-metodunun-tek-argümanı-d-b-i-dib-parametresi&#34;&gt;&lt;code&gt;find&lt;/code&gt; Metodunun Tek Argümanı (d.b.i&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:dib&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:dib&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; Parametresi)&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;find&lt;/code&gt; metodu ile ilgili bilmemiz gereken bir diğer şey aldığı argümandır.(parametre)&lt;/p&gt;

&lt;p&gt;&lt;code&gt;.find&lt;/code&gt;&amp;lsquo;dan sonra gelen parantezde aranan ifadeden hemen sonra bir virgül koyup arama yapmaya başlayacağımız pozisyonu &lt;code&gt;.find&lt;/code&gt;&amp;lsquo;a söyleyebiliriz.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;.find&lt;/code&gt; böyle bir durumda arama yapmaya verdiğimiz pozisyondan itibaren başlar.&lt;/p&gt;

&lt;p&gt;Örneğin; &lt;code&gt;bulunan_pozisyon = ozluSoz.find(bul, 7)&lt;/code&gt; ifadesinde aramaya &amp;lsquo;7.&amp;rsquo; pozisyondan başlanır ve bu pozisyondan sonraki ilk &lt;code&gt;&amp;quot;beyinler&amp;quot;&lt;/code&gt; ifadesi bulunur. (bu örnekte ikinci bulunma 32. pozisyonda gerçekleşti.)&lt;/p&gt;

&lt;p&gt;Şimdi ikisini bir görelim.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# -*- coding: utf-8 -*- 
ozluSoz =&amp;quot;&amp;quot;&amp;quot;Buyuk beyinler fikirleri, ortɑ beyinler olɑylɑri,
kucuk beyinler ise kisileri konusur.&amp;quot;&amp;quot;&amp;quot; #  birden fazla satır kullanacaksanız
bul = &amp;quot;beyinler&amp;quot;                    # üç tırnak kullanabilirsiniz.
bulunan_ilk_pozisyon = ozluSoz.find(bul) # ilk bulunan pozisyon
print bulunan_ilk_pozisyon 
print ozluSoz[7:]      # 7. pozisyondan başlayarak sona kadar yazdır
bulunan_ikinci_pozisyon = ozluSoz.find(bul, 7) # ikinci bulunan pozisyon
print bulunan_ikinci_pozisyon
print ozluSoz[33:]  # 33. pozisyondan başlayarak sona kadar yazdır
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;https://fiyakasiz.github.io/img/blog/find-metodu/find_metodu_argumansiz_kullanim.png&#34; title=&#34;&#34; data-lightbox=&#34;set1&#34; data-title=&#34;Python&#39;da find Metodunun Argümansız Kullanımı&#34; alt=&#34;&#34;&gt;&lt;img src=&#34;https://fiyakasiz.github.io/img/blog/find-metodu/find_metodu_argumansiz_kullanim_thumb.png&#34; alt=&#34;&#34;&gt;&lt;/a&gt;
&lt;a href=&#34;https://fiyakasiz.github.io/img/blog/find-metodu/find_metodu_argumanli_kullanim.png&#34; title=&#34;&#34; data-lightbox=&#34;set1&#34; data-title=&#34;Python&#39;da find Metodunun Argümanlı Kullanımı&#34;&gt;&lt;img src=&#34;https://fiyakasiz.github.io/img/blog/find-metodu/find_metodu_argumanli_kullanim_thumb.png&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Aşağıdaki örnekte &lt;code&gt;.find&lt;/code&gt; metodunun parametre ile kullanımının değişik örneklerini göreceksiniz. Ekran görüntüsü için en üstteki ana imaja bakabilirsiniz:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# -*- coding: utf-8 -*- 
ozluSoz =&amp;quot;&amp;quot;&amp;quot;Buyuk beyinler fikirleri, ortɑ beyinler olɑylɑri,
            kucuk beyinler ise kisileri konusur.&amp;quot;&amp;quot;&amp;quot;

print ozluSoz.find(&amp;quot;beyinler&amp;quot;)     # 6 -&amp;gt; argumansiz kullanim 
print ozluSoz.find(&amp;quot;beyinler&amp;quot;, 0)  # 6 -&amp;gt; en bastan başlar
print ozluSoz.find(&amp;quot;beyinler&amp;quot;, 6)  # 6 -&amp;gt; yine buldu
print ozluSoz.find(&amp;quot;beyinler&amp;quot;, 7)  # 32 -&amp;gt; bir sonrakini buldu
print ozluSoz.find(&amp;quot;beyinler&amp;quot;, 32) # 32 -&amp;gt; bir sonrakini buldu
print ozluSoz.find(&amp;quot;beyinler&amp;quot;, 33) # 62 -&amp;gt; en sonuncusunu buldu
print ozluSoz.find(&amp;quot;beyinler&amp;quot;, 63) # -1 -&amp;gt; hiçbirşey bulamadı
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;find-metodu-ile-palindrom-bulma&#34;&gt;&lt;code&gt;find&lt;/code&gt; Metodu ile Palindrom Bulma&lt;/h2&gt;

&lt;p&gt;Palindrom bulma programımızı tekrar &lt;a href=&#34;https://fiyakasiz.github.io/blog/pythonda-palindrome-bulan-program/&#34;&gt;hatırlayalım&lt;/a&gt;. Palindrom bulmada bizden istenen sonuç, kelime yada cümle palindrom ise &lt;code&gt;0&lt;/code&gt; değilse &lt;code&gt;-1&lt;/code&gt; vermesi idi.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;find&lt;/code&gt; metodu ile palindrom bulurken şöyle bir mantık güdeceğiz. Eğer bir kelime(yada cümle) palindromsa kelimeyi kendisinin tersinin hemen ilk (0.) pozisyonunda bulmuş olacağız. Yok değilse zaten kelimenin tamamı tersinde yoktur, o halde sonuç -1 verecek.&lt;/p&gt;

&lt;p&gt;Hadi bunu görelim:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# -*- coding: utf-8 -*- 
kelime = &amp;quot;madam&amp;quot; # test kelimemiz
palindrom_mu = kelime.find(kelime[::-1]) # madam&#39;ın tersinden başla, madam&#39;ı ara
        #eğer varsa find bulacak, sonuç 0. Yoksa bulamayacak, sonuç -1
print palindrom_mu # sonucu ekrana yaz
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Burada ne yaptım? &lt;code&gt;kelime&lt;/code&gt; değişkeninde verilen karakter dizisinin içinde kendisini aradım.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://fiyakasiz.github.io/img/blog/find-metodu/find_metodu_ornek_kullanimlar.png&#34; title=&#34;&#34; data-lightbox=&#34;set1&#34; data-title=&#34;Python&#39;da find Metodu Örnek Kullanımlar&#34; alt=&#34;&#34;&gt;&lt;img src=&#34;https://fiyakasiz.github.io/img/blog/find-metodu/find_metodu_ornek_kullanimlar_thumb.png&#34; alt=&#34;&#34;&gt;&lt;/a&gt;
&lt;a href=&#34;https://fiyakasiz.github.io/img/blog/find-metodu/find_metodu_ile_palindrom_bulma.png&#34; title=&#34;&#34; data-lightbox=&#34;set1&#34; data-title=&#34;.find Metodu ile Kelimenin Palindrom Olup Olmadığını Anlama&#34;&gt;&lt;img src=&#34;https://fiyakasiz.github.io/img/blog/find-metodu/find_metodu_ile_palindrom_bulma_thumb.png&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Arama işlemini tersinden(&lt;strong&gt;&amp;lsquo;kelime[::-1] ile&amp;rsquo;&lt;/strong&gt;) yaptım, daha önceki yazımda bu ifadenin tersten karakter dizisi okuma anlamına geldiğini öğrenmiştik.(Geniş bilgi için bkz. &lt;a href=&#34;https://fiyakasiz.github.io/blog/bir-kere-daha-karakter-dizileri/&#34;&gt;Bir Kere Daha Karakter Dizileri ve Indexing&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Python aranan ifadeyi bulursa &lt;code&gt;.find&lt;/code&gt; metodunun bulunan ilk pozisyonu getireceğini biliyoruz, ki o pozisyon palindrom için &lt;code&gt;0&lt;/code&gt;&amp;lsquo;dır. Bulunamazsa &lt;code&gt;.find&lt;/code&gt; metodu sonuç olarak &lt;code&gt;-1&lt;/code&gt; verir.&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;Evet dostlar, &lt;code&gt;find&lt;/code&gt; metodu ile işimiz bitti. Esasında bir sonraki yazımda Değişkenler konusuna geçiş yapmayı düşünüyordum. Ancak karakter dizilerinin önemine binaen son bir defa daha bu konuyu işleyeceğim. Zira bu konu çok kritik.&lt;/p&gt;

&lt;p&gt;Bu yazımda iyi anlaşılmayan bir taraf varsa lütfen bana &lt;a href=&#34;mailto:pythonistan@gmail.com&#34;&gt;bildirin&lt;/a&gt;. Yazımı paylaşmak için sol üstte linkler var. Çekinmeden kullanabilirsiniz :)&lt;/p&gt;

&lt;h2 id=&#34;dipnotlar&#34;&gt;DipNotlar&lt;/h2&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:dib&#34;&gt;&amp;ldquo;diğer bir ifadeyle&amp;rdquo;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:dib&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>